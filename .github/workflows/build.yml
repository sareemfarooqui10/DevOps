name: Build, Analyze, Scan

on:
  push:
    branches:
      - main

jobs:
  build-analyze-scan:
    name: Build, Analyze, and Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Disable shallow clone for better SonarQube analysis

      - name: Build and analyze with SonarQube
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} # no SONARQUBE for now
      # OWASP, Trivy done
      #any token is never placed here due to confidentiality bcz this file goes public, kind of makes sure of confidentiality
      #no token for Trivy, doesnt check quality of good code practices, just scans the code files
      #Aqua Trivy(at the time of deployemnt), scans image
      - name: Install and run Trivy
        run: |
          echo "Installing Trivy..."
          sudo apt-get install wget apt-transport-https gnupg lsb-release -y
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy -y
          echo "Running Trivy scan..."
          trivy fs . 

      - name: Install and run Snyk
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }} #things which you do not expose get stored in GitHub Secrets
        run: |
          echo "Installing Snyk..."
          npm install -g snyk

          echo "Authenticating Snyk..."
          snyk auth "${SNYK_TOKEN}"

          echo "Running Snyk test..."
          snyk test --all-projects

          echo "RMonitoring project with Snyk..."
          snyk monitor --all-projects
#logged into Snyk, authenticated using token
      - name: Install and run OWASP Dependency-Check
        run: |
          echo "Downloading and installing OWASP Dependency-Check..."
          wget https://github.com/jeremylong/DependencyCheck/releases/download/v12.1.0/dependency-check-12.1.0-release.zip
          unzip dependency-check-12.1.0-release.zip
          echo "Running OWASP Dependency-Check scan..."
          cd dependency-check/bin
          ./dependency-check.sh --scan ../.. --format ALL --nvdApiKey ${{ secrets.NVD_API_KEY }}
#OWASP done using NVD API key, which is a public API key. Collects vulnerable data from this NVD database and  helps in scanning our files against that data       
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=sareemfarooqui10_DevOps
            -Dsonar.organization=sareemfarooqui10
            -Dsonar.projectName=DevOps
            -Dsonar.analysis.ci=false
            -Dsonar.sources=.
            -Dsonar.language=js # Change based on your language
            -Dsonar.sourceEncoding=UTF-8
            -Dsonar.javascript.node.maxspace=4096
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
  security-scan-and-deploy:
    needs: build-analyze-scan
    name: Scan & Deploy
    runs-on: ubuntu-latest
    env:
      DOCKER_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/devsecops-demo
      TAG: ${{ github.sha }}

    steps:
    # --- STAGE 1: Code Checkout ---
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Required for SonarQube

    # --- STAGE 2: Security Scans (Your Existing Setup) ---

    - name: Run Snyk Scan
      run: |
        npm install -g snyk
        snyk auth ${{ secrets.SNYK_TOKEN }}
        snyk test --all-projects --fail-on=upgradable --severity-threshold=high

    - name: OWASP Dependency Check
      run: |
        wget -q https://github.com/jeremylong/DependencyCheck/releases/download/v12.1.0/dependency-check-8.3.1-release.zip
        unzip -q dependency-check-*.zip
        ./dependency-check/bin/dependency-check.sh --scan . --format HTML --out reports/
    - name: Upload OWASP Report
      uses: actions/upload-artifact@v3
      with:
        name: dependency-check-report
        path: reports/
    # --- STAGE 3: Docker Build & Security Scan ---
    - name: Validate Dockerfile
      run: 'test -f Dockerfile || echo "ERROR: Dockerfile missing" && exit 1'
    - name: Build Docker image
      run: |
        docker build -t $DOCKER_IMAGE:$TAG -t $DOCKER_IMAGE:latest .
        docker images  # Demo: Show built image

    - name: Scan Docker image with Trivy
      run: |
        trivy image --exit-code 1 --severity CRITICAL $DOCKER_IMAGE:$TAG
        trivy image --format table $DOCKER_IMAGE:$TAG  # Demo: Pretty output

    # --- STAGE 4: Push to Docker Hub (Only on main branch) ---
    - name: Login to Docker Hub
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Push to Docker Hub
      if: github.ref == 'refs/heads/main'
      run: |
        docker push $DOCKER_IMAGE:$TAG
        docker push $DOCKER_IMAGE:latest
        echo "Image pushed: https://hub.docker.com/r/$DOCKER_IMAGE"
